cat para abrir archivos "archivos.txt" etc
cat > para crear un archivo y abrirlo
nano "fichero.txt" = puedo modificar el fichero

INSTALACION DE APPS
sudo = acceder al sistema como root
apt-get forma sencilla de instalar paquetes , a != dpkg no intenta comprender los ficheros ".deb" y solo puede instalar un ".deb" desde una fuente
apt-get install
apt-get update = actualiza la lista de paquetes disponibles para instalar
apt-get upgrade = instala nuevas versiones de != paquetes disp
dkpg = gestor de paquetes debian
wget = download files from the web
apt-key = herramienta para gestior claves de APT
mv old_file new_file = renombrar directorios

MANEJO DE APPS

MONGO DB
 - iniciar -> sudo systemctl start mongod
 - detener -> sudo systemctl stop mongod
 - verificar si esta activo -> sudo systemctl status mongod

 - acceder a Mongo DB = mongosh
 - crear una DataBase = use "database name" (first-db-test)
 - acceder a una DataBase previamente hecha = use "database name" (first-db-test)
 - ver las dbs = show dbs
 - ver las colecciones (estan dentro de las db) = show collections
 - eliminar colecciones = db."nombre coleccion".drop()
 - eliminar bd = db.dropDatabase()
 - insertar datos = db.usuariosDatos.insertne({})
  # Operaciones CRUD = Crete, Read , Update , Delete
          - C: insertOne(data, options), instertMany(d,o)
          - R: find(filter, option), findOne(f,o)
	  - U: updateOne(filter, data, options),updateMany(f,d,o), replaceOne(f,d,o)
	  - D: deleteOne(filter, options), deleteMany(f,o)
- atomic operators, son necesarios para actualizar por ejemplo {$set: {marcador:"borrar"}
          - Cuando esta con signo $ y una palabra despues, es un perador atomico

- en las relaciones se deben usar referencias que se  hacen con el id respectivo "ObjectId("34g32hj4n1asd")
- para importar .json fuera de mongo en la carpeta donde esta el archivo:
	# mongoimport archivo.json -d "nombre db" -c "nombre collection" --jsonArray
		+ jsonArray es si vienen como matriz []

- Framework de Agregacion: sirv para transformar los datos, alternativa q creas pasos y combinarlos seguidos para hcer cosas estructuradas
		#  ejemplos:aggregation piplin stages (VER)
	+ db."collection name".aggregate([ {$funcion: {campo:"filtro"}}])
	- $match: es similar a find $match: {gender:"female"} 
	- $group: +..., {$group: {_id: {ciudad:"$location.city"},"nombre d columna":{$op.acc: Q(cantidad)}
		- "op.acc" : podemos usar operadores de acumulacion: por ejemplo suma $sum:1 que suma 1 por cada coincidencia
		- hace agrupaciones por alguna operacion
	-
 $sort: ordena los datos
	- $project: hace mas o menos lo mismo qe los otros 3 juntos, 


JUPYTER
 - iniciar -> jupyter notebook

GIT
token: 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 
 - herramienta de control de versiones
 - servicio de hosting de repositoriso GIT: GitHub, GitLab, BitBucket
 - Commit: nos guarda los archivos a la ultima version y se guarda en el "master" brunch
	- luego quiero cambiar solo el style.css (v.2) hago un commint 2
	- quier cmbiar otra vez algo (v.3) commit 3
 - para ver el usuario y el correo de config: git config --list

 comandos git
	+ git init (empezar un repositorio)
	+ git status (ver el estatus)
	+ git add . ("." es para agregar todo)
	+ git log: ver los commit que se han hecho
	+ git checkout podemos volver a una version anterior con el codigo del branch si uso master en vez del id, vuelvo a lo que estaba antes.

	- branch: cambiar de rama
	+ git branch: muestra la rama en la que estamos
	+ git checkout -b "nombre de rama": crea una nueva rama y te cambia a esa
	- pull: descargar los cambios
	- add: aÃ±adir los cambios antes de guardarlos
	- commit: publicar los cambios
	- push: empujar hacia el repositorio
	- merge: unir ramas
	+ git merge "nombre de commit"
	- git rm "nombre commit"

- Ramas -> Branch
	- master branch: es la que tiene todo, la que esta en linea, la q se publica
	- branch secundaria: para hacer pruebas, para unirlas se usa merge
	 
- HEAD  -> el ultimo commit, el mas adelantado, pueden haber varias o solo una que tiene la HEAD
- detached HEAD   - commit previos de otras ramas que antes fueron HEAD
- git switch: cambiar de rama mas rapido, si agrego "-c" se crea la rama si esq esta no existe
- git ls-files: muestra los archivos de la rama
- git ignore: archivo que no quiero que este en git
- git stash: vuelve a tu ultima version del repositori pero se guarda
- git stash apply: para re hacer el stash
- git reflog: recuperar commits o ramas borradas

